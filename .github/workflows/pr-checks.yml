name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-validation:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better diff analysis
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        uv sync --extra test --extra dev
    
    - name: Check PR title and description
      run: |
        echo "PR Title: ${{ github.event.pull_request.title }}"
        echo "PR Body: ${{ github.event.pull_request.body }}"
        
        # Check if PR title follows conventional commit format (optional)
        if [[ ! "${{ github.event.pull_request.title }}" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
          echo "::warning::PR title doesn't follow conventional commit format (feat/fix/docs/etc: description)"
        fi
    
    - name: Run quick tests
      run: |
        # Run a subset of fast tests for quick feedback
        uv run pytest tests/test_models.py -v
    
    - name: Check for changes in critical files
      run: |
        # Check if critical files were modified
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        echo "Changed files: $CHANGED_FILES"
        
        if echo "$CHANGED_FILES" | grep -q "src/cmmn_parser/models.py"; then
          echo "::notice::Models were modified - ensure backward compatibility"
        fi
        
        if echo "$CHANGED_FILES" | grep -q "src/cmmn_parser/parser.py"; then
          echo "::notice::Parser was modified - ensure all CMMN constructs still work"
        fi
        
        if echo "$CHANGED_FILES" | grep -q "pyproject.toml"; then
          echo "::notice::Dependencies were modified - check for security implications"
        fi
    
    - name: Lint changed files only
      run: |
        # Get list of changed Python files
        CHANGED_PY_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.py$' || true)
        
        if [ ! -z "$CHANGED_PY_FILES" ]; then
          echo "Linting changed files: $CHANGED_PY_FILES"
          uv run flake8 $CHANGED_PY_FILES --count --select=E9,F63,F7,F82 --show-source --statistics
          uv run black --check $CHANGED_PY_FILES
          uv run isort --check-only $CHANGED_PY_FILES
        else
          echo "No Python files changed"
        fi
    
    - name: Comment on PR with test results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { context } = require('@actions/core');
          
          let comment = '## 🔍 PR Check Results\n\n';
          comment += '✅ Basic validation completed\n';
          comment += '📊 Full test suite will run on the main CI workflow\n\n';
          comment += '### Next Steps\n';
          comment += '- Ensure all tests pass in the CI workflow\n';
          comment += '- Review any warnings or notices above\n';
          comment += '- Address any failing checks\n';
          
          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for dependency changes
      run: |
        if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "pyproject.toml"; then
          echo "::warning::Dependencies were modified in this PR"
          echo "Please ensure:"
          echo "1. New dependencies are necessary and well-maintained"
          echo "2. Version constraints are appropriate"
          echo "3. No security vulnerabilities are introduced"
          echo "4. Dependencies are compatible with supported Python versions"
        else
          echo "No dependency changes detected"
        fi

  auto-assign:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
    - name: Auto-assign reviewers
      uses: actions/github-script@v7
      with:
        script: |
          // Auto-assign the PR author as an assignee
          github.rest.issues.addAssignees({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            assignees: [context.payload.pull_request.user.login]
          });
          
          // Add helpful labels based on changed files
          const changedFiles = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number
          });
          
          let labels = [];
          
          const files = changedFiles.data.map(f => f.filename);
          
          if (files.some(f => f.startsWith('src/'))) {
            labels.push('code-change');
          }
          
          if (files.some(f => f.startsWith('tests/'))) {
            labels.push('test-change');
          }
          
          if (files.some(f => f.includes('pyproject.toml'))) {
            labels.push('dependencies');
          }
          
          if (files.some(f => f.includes('README') || f.includes('.md'))) {
            labels.push('documentation');
          }
          
          if (labels.length > 0) {
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: labels
            });
          }